#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define N 20
#define LEN 100
void  InputRecord(int n,int subject,int record[][6],long id[],long orid[],int orrecord[][6],char name[][N],char orname[][N]);
void Calcuate (int n,int i,int subject,int record[][6]);
int CalcuateStu (int n,int i,int record[][6]);
void SelectionRecord(int add[],long id[],int record[][6],int n,int subject,char name[][N],int(*compare)(int a,int b));
int Descending (int a,int b);
int Ascending (int a,int b);
int Ascending2 (long a,long b);
void SelectNumber(int record[][6],long id[],int add[],int n,int subject,char name[][N],int(*compare)(long a,long b));
int Ascending3(char a[N],char b[N]);
void SelectName(int record[][6],long id[],int add[],int n,int subject,char name[][N],int(*compare)(char a[N],char b[N]));
void Ranking(int record[][6],char name[][N],long id[],int add[],int n,int subject,int (*compare)(int a,int b));
int SearchId(long id[],int n,long x);
int SearchName(char name[][N],int n,char y[N]);
int Statistic(int record[][6],int c,int n,int(*compare)(int a));
int Type1(int a);
int Type2(int a);
int Type3(int a);
int Type4(int a);
int Type5(int a);
void  OutputRecord(int n,int record[][6],long id[],char name[][N],int add[],int subject);
int main()
{
    printf("Number :200210513\n");
    printf("subject No.7-program No.1\n");
    printf("\n");


    int record[LEN][6]={0};//学生成绩
    int orrecord[LEN][6]={0};
    long id[30]={0};//学生学号
    long orid[30]={0};
    char name[30][N];//学生姓名
    char orname[30][N];
    int n;//输入学生的人数n，n是一个不大于30的数


    int subject;//需要计算的科目数量

    int add[30]={0};//记录学生总分
    int oradd[30]={0};
    long x;//输入的查找学号是否在输入的学生中
    int m1,m2;//判断成绩是否在输入内的一个参数
    int score;//计算被查找学生的总分
    int c,i;//计数循环使用判别次数
    char y[N];//判断查找的姓名是否在输入的学生中
    float t1,t2,t3,t4,t5;//储存个分数段的占比
    int key;//输入的选择




     do
    {
        printf("1.Input record\n");
        printf("2.Calculate total and average score of every course\n");
        printf("3.Calculate total and average score of everystudent\n");
        printf("4.Sort in descending order by total score of every student\n");
        printf("5.Sort in ascending order by total score of every stduent \n");
        printf("6.Sort in ascending order by number\n");
        printf("7.Sort in dictionary order by name\n");
        printf("8.Search by number\n");
        printf("9.Search by name\n");
        printf("10.Statistic analysis\n");
        printf("11.List record\n");
        printf("0.Exit\n");
        printf("Please enter you choice:");
        scanf("%d",&key);


        if(key==1)
        {

                printf("班级的学生人数为：");
                scanf("%d",&n);
                if(n>30)
                    {
                            printf("输入人数大于本班人数，请重新输入\n");
                            printf("班级的学生人数为：");
                            scanf("%d",&n);
                    }
                printf("需要计算的课程数目为：");
                scanf("%d",&subject);
                if(subject>6)
                {
                            printf("输入课程数目大于最多科目门数，请重新输入\n");
                            scanf("%d",&subject);
                }
                InputRecord(n,subject,record,id,orid,orrecord,name,orname);
                 for(i=0;i<n;i++)
                 {
                     add[i]=CalcuateStu(subject,i,record);
                     oradd[i]=add[i];
                 }

        }
        if(key==2)
        {
                 for(i=0;i<subject;i++)
                 Calcuate(n,i,subject,record);


        }
        if(key==3)
        {
               for(i=0;i<n;i++)
              {
                 add[i]=CalcuateStu(subject,i,record);
                 printf("该班该学生所有课程总分和平均分为：");
                 printf("%d\t%f\n",add[i],(double)add[i]/subject);
                }
        }
        if(key==4)
        {
                for(i=0;i<n;i++)
                    add[i]=CalcuateStu(subject,i,record);
                printf("按降序打印学生名次表（总成绩，学号，姓名，排名）：\n");
                SelectionRecord(add,id,record,n,subject,name,Descending);
        }
        if(key==5)
        {
                 for(i=0;i<n;i++)
                    add[i]=CalcuateStu(subject,i,record);
                printf("按升序打印学生名次表（总成绩，学号，姓名，排名）：\n");
                SelectionRecord(add,id,record,n,subject,name,Ascending);
        }
        if(key==6)
        {
                printf("按学号升序打印成绩单（学号，姓名，各科成绩）：\n");
                SelectNumber(record,id,add,n,subject,name,Ascending2);
        }
        if(key==7)
        {
                printf("按姓名的字典顺序打印成绩单（学号，姓名，各科成绩）：\n");
                SelectName(record,id,add,n,subject,name,Ascending3);
        }
        if(key==8)
        {
                printf("请输入需要查找的学生的学号：");
                scanf("%ld",&x);
                m1=SearchId(id,n,x);
                if(m1!=-1)
                {
                            printf("该生的各科成绩为：");
                            for(c=0;c<subject;c++)
                                        printf("%d\t",record[m1][c]);
                            printf("\n");
                            printf("该生的姓名为:%s\n",name[m1]);
                            printf("该生总分，平均分为：");
                            printf("%d\t%f",add[m1],(double)add[m1]/subject);
                            Ranking(record,name,id,add,n,subject,Descending);
                            score=CalcuateStu(n,m1,record);
                            for(c=0;c<n;c++)
                            {
                                        if(score==add[c])
                                                m1=c;
                            }
                            printf("\n");
                            printf("该生的排名为:%d\n",m1+1);
                }
                else
                            printf("Sorry.No finding.\n");
        }
        if(key==9)
        {
                printf("请输入需要查找的学生姓名：");
                scanf("%s", y);
                m2=SearchName(name,n,y);
                if(m2!=-1)
                {
                            printf("该生的各科成绩为：");
                            for(c=0;c<subject;c++)
                                        printf("%d\t",record[m2][c]);
                            printf("\n");
                            printf("该生的学号为:%ld\n",id[m2]);
                            printf("该生总分，平均分为：");
                            printf("%d\t%f",add[m2],(double)add[m2]/subject);
                            Ranking(record,name,id,add,n,subject,Descending);
                            score=CalcuateStu(n,m2,record);
                            for(c=0;c<n;c++)
                            {
                                        if(score==add[c])
                                                m2=c;
                            }
                            printf("\n");
                            printf("该生的排名为:%d\n",m2+1);
                }
                else
                            printf("Sorry.No finding.\n");
        }
        if(key==10)
        {
                for(c=0;c<subject;c++)
                {
                    printf("在第%d科优秀分数段的人数为：",c+1);
                    t1= (float)Statistic(record,c,n,Type1)/n;
                    printf("在优秀分数段的百分比为：%f %%\n",100*t1);
                    printf("在第%d科良好分数段的人数为：",c+1);
                    t2= (float)Statistic(record,c,n,Type2)/n;
                    printf("在良好分数段的百分比为：%f %%\n",100*t2);
                    printf("在第%d科中等分数段的人数为：",c+1);
                    t3= (float)Statistic(record,c,n,Type3)/n;
                    printf("在中等分数段的百分比为：%f %%\n",100*t3);
                    printf("在第%d科及格分数段的人数为：",c+1);
                    t4= (float)Statistic(record,c,n,Type4)/n;
                    printf("在及格分数段的百分比为：%f %%\n",100*t4);
                    printf("在第%d科不及格分数段的人数为：",c+1);
                    t5= (float)Statistic(record,c,n,Type5)/n;
                    printf("在不及格分数段的百分比为：%f %%\n",100*t5);
                    printf("\n\n");
                }
        }
        if(key==11)
        {
                printf("打印原本的学生的成绩单:\n");
                OutputRecord(n,orrecord,orid,orname,oradd,subject);
        }
        if(key==0);
        if(key>11||key<0)
               printf("输入错误，请重新输入\n");
    }while(key!=0);
return 0;
}
/*------------------------*/
/*输入学生成绩,学号和姓名*/
/*------------------------*/
void  InputRecord(int n,int subject,int record[][6],long id[],long orid[],int orrecord[][6],char name[][N],char orname[][N])
{       int i,j;
        for(i=0;i<n;i++)
        {

              printf("输入学生学号,姓名:");
              scanf("%ld,%s,",&id[i],name[i]);

               if(id[i]<=0)
                {
                        printf("输入错误，该数据不计入统计，请重新输入\n");
                        scanf("%ld,%s,",&id[i],name[i]);
                }
                for(j=0;j<subject;j++)
                {
                    printf("请输入该学生第%d科需要计算的成绩:",(j+1));
                    scanf("%d",&record[i][j]);
                    if(record[i][j]>100||record[i][j]<0)
                        {
                        printf("输入错误，该数据不计入统计，请重新输入\n");
                        scanf("%d",&record[i][j]);
                        }
                    orrecord[i][j]=record[i][j];
                }
            orid[i]=id[i];
            strcpy(orname[i],name[i]);
        }
}
/*----------------*/
/*计算该班某科学生成绩总分*/
/*----------------*/
void Calcuate (int n,int i,int subject,int record[][6])
{
        int add=0;
        int k;

        for (k=0;k<n;k++)
        {
                add=add+record[k][i];
        }
        printf("该科总分为：%d\n",add);
        printf("该科平均分为：%f\n",(double)add/n);
}


/*----------------*/
/*计算该班某学生成绩总分*/
/*----------------*/
int CalcuateStu (int subject,int i,int record[][6])
{
        int add=0;
        int k;
        for (k=0;k<subject;k++)
                add=add+record[i][k];
        return add;
}

/*----------------------*/
/*按成绩升降序排列出名次表*/
/*----------------------*/
void SelectionRecord(int add[],long id[],int record[][6],int n,int subject,char name[][N],int(*compare)(int a,int b))
{
        int i,j,k,temp1,temp2;
        long number;
        char chartemp[N];
        int p=0;

        for (i=0;i<n-1;i++)
        {           for (j=i+1;j<n;j++)
                    {
                            if ((*compare)(add[i],add[j]))
                            {
                                    for(k=0;k<subject;k++)
                                    {
                                            temp1=record[i][k];
                                            record[i][k]=record[j][k];
                                            record[j][k]=temp1;
                                    }
                                    temp2=add[i];
                                    add[i]=add[j];
                                    add[j]=temp2;
                                    number=id[i];
                                    id[i]=id[j];
                                    id[j]=number;
                                    strcpy(chartemp,name[i]);
                                    strcpy(name[i],name[j]);
                                    strcpy(name[j],chartemp);
                            }
                    }
        }
        while (p<n)
        {
                printf("%d\t%ld\t%s\t%d\n",add[p],id[p],name[p],(p+1));
                p++;
        }

}
/*--------------------*/
/*升降序排列的条件判断*/
/*--------------------*/
int Ascending (int a,int  b)
{
        return a>b;
}
int Descending (int a,int b)
{
        return a<b;
}


/*--------------*/
/*按学号升序排列*/
/*--------------*/
void SelectNumber(int record[][6],long id[],int add[],int n,int subject,char name[][N],int(*compare)(long a,long b))
{
        long number;
        int i,j,temp;
        char chartemp[N];
        int k;

        for (i=0;i<n-1;i++)
        {
                    for (j=i+1;j<n;j++)
                    {
                            if((*compare)(id[i],id[j]))
                            {
                                for(k=0;k<subject;k++)
                                {
                                        temp=record[i][k];
                                        record[i][k]=record[j][k];
                                        record[j][k]=temp;
                                }
                                temp=add[i];
                                add[i]=add[j];
                                add[j]=temp;
                                number=id[i];
                                id[i]=id[j];
                                id[j]=number;
                                strcpy(chartemp,name[i]);
                                strcpy(name[i],name[j]);
                                strcpy(name[j],chartemp);

                            }
                    }
        }
        k=0;
        while (k<n)
            {
                     printf("%ld\t%s\t",id[k],name[k]);
                     for(i=0;i<subject;i++)
                            printf("%d\t",record[k][i]);
                     printf("\n");
                     k++;
            }

}
int Ascending2 (long a,long b)
{
        return a>b;
}
/*_-------------------*/
/*按姓名的字典顺序排列*/
/*--------------------*/
void SelectName(int record[][6],long id[],int add[],int n,int subject,char name[][N],int(*compare)(char a[N],char b[N]))
{
        long number;
        int i,j,temp;
        char chartemp[N];
        int k;

        for (i=0;i<n-1;i++)
        {
                    for (j=i+1;j<n;j++)
                    {
                            if((*compare)(name [i],name [j]))
                            {
                                for(k=0;k<subject;k++)
                                {
                                        temp=record[i][k];
                                        record[i][k]=record[j][k];
                                        record[j][k]=temp;
                                }
                                temp=add[i];
                                add[i]=add[j];
                                add[j]=temp;
                                number=id[i];
                                id[i]=id[j];
                                id[j]=number;
                                strcpy(chartemp,name[i]);
                                strcpy(name[i],name[j]);
                                strcpy(name[j],chartemp);

                            }
                    }
        }
        k=0;
        while (k<n)
            {
                     printf("%ld\t%s\t",id[k],name[k]);
                     for(i=0;i<subject;i++)
                     printf("%d\t",record[k][i]);
                     printf("\n");
                     k++;
            }

}
int Ascending3(char a[N],char b[N])
{
       return (strcmp(a,b)>0);
}
/*------------------------------*/
/*输入学号查找学生排名及考试成绩*/
/*------------------------------*/
int SearchId(long id[],int n,long x)
{
        int i;

        for(i=0;i<n;i++)
        {
            if(id[i]==x)
                return i;
        }
        return -1;

}
/*------------------------------*/
/*输入姓名查找学生排名及考试成绩*/
/*------------------------------*/
int SearchName(char name[][N],int n,char y[N])
{
        int i;
        char*p2=y;

        for(i=0;i<n;i++)
        {
                char *p1=name[i];
                if(strcmp(p1,p2)==0)
                        return i;
        }
        return -1;
}
/*----------------------------------------------*/
/*将成绩进行降序排列*/
/*---------------------------------------------*/
void Ranking(int record[][6],char name[][N],long id[],int add[],int n,int subject,int (*compare)(int a,int b))
{
    int i,j,k,temp;
    long number;
    char chartemp[N];
    for(i=0;i<n-1;i++)
    {
        for(j=i+1;j<n;j++)
                    {
                            if((*compare)(add[i],add[j]))
                            {
                                temp=add[i];
                                add[i]=add[j];
                                add[j]=temp;
                                for(k=0;k<subject;k++)
                                {
                                        temp=record[i][k];
                                        record[i][k]=record[j][k];
                                        record[j][k]=temp;
                                }
                                number=id[i];
                                id[i]=id[j];
                                id[j]=number;
                                strcpy(chartemp,name[i]);
                                strcpy(name[i],name[j]);
                                strcpy(name[j],chartemp);

                            }

                    }
    }
}
/*-------------------------------------------------------------------------------------*/
/*统计优秀，良好，中等，及格，不及格分数段的人数及所占的百分比*/
/*------------------------------------------------------------------------------------*/
int Statistic(int record[][6],int c,int n,int(*compare)(int a))
{
        int i;
        int z=0;
        for(i=0;i<n;i++)
        {
                    if((*compare) (record[i][c]))
                    z++;
        }
        printf("%d\n",z);
        return z;
}
int Type1(int a)
{
        return ((a>=90)&&(a<=100));
}
int Type2(int a)
{
        return ((a>=80)&&(a<90));
}
int Type3(int a)
{
        return ((a>=70)&&(a<80));
}
int Type4(int a)
{
        return ((a>=60)&&(a<70));
}
int Type5(int a)
{
        return((a<60)&&(a>=0));
}
/*--------------------------------*/
/*打印学号,成绩和姓名，按原本的输入顺序*/
/*--------------------------------*/
void  OutputRecord(int n,int record[][6],long id[],char name[][N],int add[],int subject)
{       int i,j;

        for(i=0;i<n;i++)
        {
            printf("学生的学号，姓名为：");
            printf("%ld\t%s\n",id[i],name[i]);
            printf("各科的成绩:");
            for(j=0;j<subject;j++)
                printf("%d\t",record[i][j]);
            printf("\n");
            printf("总分，平均分分别为:");
            printf("%d\t%f",add[i],(double)add[i]/subject);
            printf("\n\n");
        }
}

